***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer: A programming language is any set of rules that converts strings, or graphical program elements in the case of
visual programming languages, to various kinds of machine code output. Programming languages are one kind of computer language,
and are used in computer programming to implement algorithms.

What is a JDK composed of? Define each components?
Answer:
The Java Development Kit (JDK) is a cross-platformed software development environment that offers a collection of tools
and libraries necessary for developing Java-based software applications and applets. It is a core package used in Java,
along with the JVM(Java Virtual Machine) and the JRE (Java Runtime Environment).

JDK:
The JDK has a private Java Virtual Machine (JVM) and a few other resources necessary for the development of a Java Application.

JRE:
It is an interpreter/loader (Java), a compiler (javac), an archiver(jar), a documentation generator(javadoc) and other tools
needed in Java development.

What is an IDE?
Answer:
An IDE (which stands for Integrated Development Environment) is a software application that allows
developers to write, debug and test code for multiple programming
languages.
An IDE is an application that helps to facilitate software development.
It offers a code editor, compiler, and debugger in one application, making programming easier.
In addition, many IDEs also include features like syntax highlighting and code completion.
IDEs are popular among developers because they make coding faster and easier.
By merging many tasks into a single application, an IDE can help you be more productive and
write better code. Additionally, IDEs often offer plugins that add features and flexibility,
making them customizable to your needs. If you’re looking for a way to write code faster,
then an IDE is your tool!

What are some of the most popular Java IDEs available in the market?
Answer:
The best Java IDE finds a balance between features and being lightweight and performative,
as we will see below.
Eclipse.
IntelliJ IDEA.
NetBeans.
BlueJ.
(Oracle) JDeveloper.
DrJava.
jGRASP.
MyEclipse.

Explain the entire java life cycle.
Answer:
Life cycle of a java program tells us what happens right from the point when we type source
code in a text editor to the point that source code is converted into machine
code (0’s and 1’s).
There are three main stages in the life cycle of a java program. They are:
 -Editing the program
 -Compiling the source code
 -Executing the byte code

1). Editing the program:
    Start typing the program in a text-editor (ex: notepad, notepad++, wordpad, textedit etc).
    After completing editing of the program, we have to save the file.
    While saving the file we should remember that the file must be saved with .java extension.
    For example, sample.java, where sample is the file name.

2). Second step is compilation. The name of the Java compiler is javac.
    The input to the compiler is Java source code which is available in Sample.java.
    The output of the compiler is machine independent or platform independent code which is known as bytecode.
    The file which is generated after compilation is .class file.
    As per my example, the bytecode file will be Sample.class.

3). Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM).
    Input to the JVM is bytecode and output is machine code (0’s and 1’s)
    which will be executed by the CPU of the local machine.

What is a class?
Answer:
A class — in the context of Java — is a template used to create objects
and to define object data types and methods. Classes are categories, and objects are items within each category.
All class objects should have the basic class properties. Core properties include the actual
attributes/values and methods that may be used by the object.

What is an object?
Answer:
Java is an object-oriented programming language. Everything in Java is associated with classes and objects,
along with its attributes and methods. For example: in real life, a car is an object. The car has attributes,
such as weight and color, and methods, such as drive and brake.

What is the entry point of a Java project?
Answer:
An application entry point identifies a resource that is an access point to an application. Application entry
points are used to control users' access to different versions of an application that is deployed on a platform.

Why is the main() method static?
Answer:
Java main() method is always static, so that compiler can call it without the creation of an object or before the
creation of an object of the class.

a). In any Java program, the main() method is the starting point from where compiler starts program execution.
    So, the compiler needs to call the main() method.
b). If the main() is allowed to be non-static, then while calling the main() method JVM has to
    instantiate its class.
c). While instantiating it has to call the constructor of that class, There will be ambiguity
    if the constructor of that class takes an argument.
d). Static method of a class can be called by using the class name only without creating an object of a class.
e). The main() method in Java must be declared public, static and void. If any of these are missing,
    the Java program will compile but a runtime error will be thrown.

Which class is the superclass of all classes?
Answer: The 'Object' class is the superclass of all classes.

What is difference between path and classpath variables?
Answer:
Path in Java: Once installed Java on machine, it is required to Set the PATH environment
variable to conveniently run the executable (javac.exe, java.exe, javadoc.exe, and so on)
from any directory without having to type the full path of the command, such as:
C:\javac TestClass.java, Otherwise, we have to specify the full path every time we run it,
such as: C:\Java\jdk1.7.0\bin\javac TestClass.java

Classpath: Classpath is system environment variable used by the Java compiler and JVM.
Java compiler and JVM is used Classpath to determine the location of required class files.
C:\Program Files\Java\jdk1.6.0\bin

What is the difference between an Interface and Abstract class?
Answer:

Key Difference Between Abstract Class and Interface in Java:
a). In Interface, a class can implement multiple interfaces,
    whereas the class can inherit only one Abstract Class.
b). In Interface does not have access modifiers.
    Everything defined inside the Interface is assumed to have a public modifier,
    whereas Abstract Class can have an access modifier.
c). The Interface cannot contain data fields, whereas the abstract class can have data fields.
d). Interfaces help define a class’s peripheral abilities, whereas an abstract class defines the
    identity of a class.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer:
No, we can't create an object of an abstract class. But we can create a reference variable of an abstract class.
The reference variable is used to refer to the objects of derived classes (subclasses of abstract class).
An abstract class means hiding the implementation and showing the function definition to the user is known as Abstract class.
A Java abstract class can have instance methods
that implement a default behavior if we know the requirement and partially implementation we can go for an abstract class.

What is Access Modifier?
Answer:
The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class.
We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.
There are four types of Java access modifiers:

a). Private: The access level of a private modifier is only within the class.
    It cannot be accessed from outside the class.
b). Default: The access level of a default modifier is only within the package.
    It cannot be accessed from outside the package. If you do not specify any access level,
    it will be the default.
c). Protected: The access level of a protected modifier is within the package and outside the package through
    child class. If you do not make the child class, it cannot be accessed from outside the package.
d). Public: The access level of a public modifier is everywhere. It can be accessed from within the class,
    outside the class, within the package and outside the package.

What is OOP? Define each OOP concept.
Answer:
Object-oriented programming is a core of Java Programming, which is used for designing a program using classes and objects.
OOPs, can also be characterized as data controlling for accessing the code. In this approach,
programmers define the data type of a data structure and the operations that are applied to the data structure.

The following is a list of the OOPs concepts in Java:
1. Class: Classes are like object constructors for creating objects. The collection of objects is said to be a class.
          Classes are said to be logical quantities. Classes don’t consume any space in the memory.
          Class is also called a template of an object. Classes have members which can be fields, methods and constructors.
          A class has both static and instance initializers.
2. Object: Objects are always called instances of a class which are created from a class in java or any other language.
3. Inheritance: Inheritance is a method in which one object acquires/inherits another object’s properties,
                and inheritance also supports hierarchical classification. The idea behind this is that we can create
                new classes built on existing classes, i.e., when you inherit from an existing class,
                we can reuse methods and fields of the parent class. Inheritance represents the parent-child relationship.
4. Polymorphism: Polymorphism refers to many forms, or it is a process that performs a single action in different ways.
                 It occurs when we have many classes related to each other by inheritance.
                 Polymorphism is of two different types, i.e., compile-time polymorphism and runtime polymorphism.
5. Abstraction: Abstraction is a process which displays only the information needed and hides the unnecessary information.
                We can say that the main purpose of abstraction is data hiding.
6. Encapsulation: Encapsulation is one of the concepts in OOPs concepts;
                  it is the process that binds together the data and code into a single unit and keeps both from being safe
                  from outside interference and misuse. In this process, the data is hidden from other classes and can be accessed
                  only through the current class’s methods. Hence, it is also known as data hiding.
7. Association: Association is a relation between two separate classes that establishes with the help of their Objects.
                It specifies the relationship between two or more Objects.
8. Aggregation: Java Aggregation is a weak association and represents a relationship between an object containing other objects.
               This represents a part of a whole relationship where a part can exist without a whole. Let’s take
               an example of the relationship between Group and Person.
9. Composition: Java Composition is an association that represents a part of a whole relationship where a part
                cannot exist without a whole. Let’s take an example of the relationship between School and Room.

What is Java Package and which package is imported by default?
Answer:
    Java package is the mechanism to organize the java classes by grouping them. The grouping logic can be based on
    functionality or modules based. A java class fully classified name contains package and class name.
    For example, java.lang.Object is the fully classified name of Object class that is part of java.lang package.
    java.lang package is imported by default and we don’t need to import any class from this package explicitly.

What is an API? List some API's that you have used so far.
Answer:
    When the two most viable and essential application/software development comes together,
    programmers are allowed to have unmatched functionality. Java API (Application Programming Interface)
    is the perfect example of how to attain this.
    We have used JDBC API,

Does java support multiple inheritance? Why or why not?
Answer:
    Java doesn’t support Multiple Inheritance. Multiple Inheritance is a feature of an object-oriented concept,
    where a class can inherit properties of more than one parent class.
    The problem occurs when there exist methods with the same signature in both the superclasses and subclass.
    On calling the method, the compiler cannot determine which class method to be called and even
    on calling which class method gets the priority.

What is method overloading? List all of the different ways to overload.
Answer:
        If a class has multiple methods having same name but different in parameters,
        it is known as Method Overloading.
        Method overloading: have to satisfy all conditions
        1. Same name
        2. same class
        3. Different argument
            we can make different by :
                a. no. of argument
                b. sequence of argument
                c. Type of argument

Explain exceptions in java and how to handle them.
Answer:
    In Java, an exception is an event that disrupts the normal flow of the program.
    It is an object which is thrown at runtime.
    The Exception Handling in Java is one of the powerful mechanism to handle the runtime errors so
    that the normal flow of the application can be maintained.
    The try-catch is the simplest method of handling exceptions. Put the code you want to run in the try block,
    and any Java exceptions that the code throws are caught by one or more catch blocks.
    This method will catch any type of Java exceptions that get thrown. This is the simplest mechanism for
    handling exceptions.

What is static keyword? When and how do we use it?
Answer:
The static keyword in Java is mainly used for memory management. The static keyword in Java is used to share the
same variable or method of a given class. The users can apply static keywords with variables, methods, blocks,
and nested classes. The static keyword belongs to the class than an instance of the class. The static keyword is used for a constant variable or a method that is the same for every
instance of a class.

What is final keyword? When and how do we use it?
Answer:
The final keyword in java is used to restrict the user. The java final keyword can be used in many context.
Final can be:
            a). variable
            b). method
            c). class
The final keyword can be applied with the variables, a final variable that have no value it is called blank
final variable or uninitialized final variable. It can be initialized in the constructor only.
The blank final variable can be static also which will be initialized in the static block only.
We will have detailed learning of these. Let's first learn the basics of final keyword.

Explain the difference between final, finally and finalize?
Answer:
The final, finally, and finalize are keywords in Java that are used in exception handling.
Each of these keywords has a different functionality. The basic difference between final, finally and finalize
is that the:
final is an access modifier,
finally is the block in Exception Handling and
finalize is the method of object class.

What is a constructor?
Answer: We can describe Constructor as:
1. Constructor is block (similar to method) having same as that of Class name.
2. Constructor does not having return type, not even void.
3. The only access modifier can use, public, protected, default and private
4. Constructor, it executes automatically.


Can we have multiple constructors in a class?
Answer:
There can be multiple constructors in a class. However, the parameter list of the constructors should not be same.

If we don't have a constructor declared, what is called during the object creation?
Answer:
All classes have at least one constructor. If a class does not explicitly declare any, the Java compiler automatically
provides a no-argument constructor, called the default constructor.

What is "this" keyword in Java? When would we use it?
Answer:
The 'this' keyword refers to the current object in a method or constructor.
The variable which refers to that object is called reference variable.  "this" keyword is the
reference variable that refers to the current object.
uses of "this" keyword:
1. this keyword can be uses to refer current class instance variable.
2. this keyword can be used to invoke current class method (implicitly).
3. this() can be used to invoke current class constructor.
4. this can be used to pass as an argument in the method call.
5. this can be used to pass as an argument in the constructor call.
6. this can be used to return the current class instance from the method.

Note that if we don't use the 'this' keyword, compiler automatically adds this keyword while invoking the method.

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:
    The super keyword refers to superclass (parent) objects. It is used to call superclass methods,
    and to access the superclass constructor.
    1). 'super' keyword can be used to refer immediate parent class instance variable.
    2). 'super' keyword can be used to invoke immediate parent class method.
    3). super() can be used to invoke immediate parent class constructor.

What does JVM stand for?
Answer:
The Java Virtual Machine (JVM) is the runtime engine of the Java Platform, which allows any program written in Java or
other language compiled into Java bytecode to run on any computer that has a native JVM.
JVMs run in both clients and servers, and the Web browser can activate the JVM when it encounters a Java applet.
The JVM includes a just-in-time (JIT) compiler that converts the bytecode into machine language so that
it runs as fast as a native executable. The compiled program can be cached in the computer for reuse.

Is JVM platform independent?
Answer:
Java "the language" is platform-independent. To make it so, there is a platform-specific JRE
that knows how to run the platform-independent Java code on a specific platform.
The JVM could be called platform-independent because it produces the same results running
the same Java code on different platform(*). It is however (at least partially)
implemented as a platform-dependent executable.

What version of Java are you using?
Answer:
I am using: java 18.0.2.1 2022-08-18
            Java(TM) SE Runtime Environment (build 18.0.2.1+1-1)
            Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-1, mixed mode, sharing)

What does JAR stand for?
Answer:
A JAR (Java Archive) is a package file format typically used to aggregate many Java class files and
associated metadata and resources (text, images, etc.) into one file to distribute
application software or libraries on the Java platform.
In simple words, a JAR file is a file that contains a compressed version of .class files,
audio files, image files, or directories.

What is the difference between JDK and JVM?
Answer:
JDK is a software development environment used for making applets and Java applications.
The full form of JDK is Java Development Kit. Java developers can use it on Windows,
macOS, Solaris, and Linux. JDK helps them to code and run Java programs.
It is possible to install more than one JDK version on the same computer.
JVM is an engine that provides a runtime environment to drive the Java Code or applications.
It converts Java bytecode into machine language. JVM is a part of Java Run Environment (JRE).
It cannot be separately downloaded and installed. To install JVM, you need to install JRE.
The full form of JVM is Java Virtual Machine.
In many other programming languages, the compiler produces machine code for a specific system.
However, Java compiler produces code for a virtual machine which is called as JVM.
JDK is Java Development Kit and JVM is Java Virtual Machine. JDK contains JVM and whole
other tools for java development inside it. JVM converts bytecode to machine code and
execute it on machine. There is no matching functionality between JDK and JVM.

What is the difference between JVM and JRE?
Answer:
A major differences between JRE and JVM is in below:
---------------------------------------------------------------------------------------------
                        JRE	                    |                       JVM
---------------------------------------------------------------------------------------------
JRE contains Java class libraries,              | JVM does not have many additional tools.
Java virtual machines, and other tools that     | It is mainly biassed to code conversion and performs
the programs need to execute. Please note the   | are not included in JRE. other minor functions,
development tools like compiler and debuggers   | i.e., memory management and security.
                                                | It converts bytecode into low-level
                                                | machine code, i.e., Assembly language.
      ----------------------------------------------------------------------------------
JRE becomes operational at the moment when      | JVM becomes operational when the bytecode
the application program is executed.            | needs to be interpreted into machine language.
        ----------------------------------------------------------------------------------
JRE works on the whole program.                 | JVM is a segment of JRE so it cannot be
This means it identifies specific libraries     | installed or downloaded directly.
and packages it needs to perform,               | We interrupt with JVM after JRE installation.
such as math, util, swing, lang, and AWT.       |
        ----------------------------------------------------------------------------------
 JRE is installed into JDK by default.          | JVM is sub-bundled with JRE,
                                                | whose main function is to read the generated bytecode.
--------------------------------------------------------------------------------------------------------

Explain the difference between compile-time and run-time?
Answer:
    Compile-time and Runtime are the two programming terms used in the software development.
    Compile-time is the time at which the source code is converted into an executable code while
    the run time is the time at which the executable code is started running. Both the compile-time
    and runtime refer to different types of error.

What is heap?
Answer:
    In Java, a heap is a chunk of memory which is shared among all threads.
    In a heap, all class instances and the array is allocated.
    It is created when JVM starts-up. An automatic storage management system reclaims heap.
    It may be of fixed and variable size. It does not need to be contiguous.
How does Java manage its memory?
Answer:
In Java, memory management is the process of allocation and de-allocation of objects,
called Memory management. Java does memory management automatically.
Java uses an automatic memory management system called a garbage collector.
Thus, we are not required to implement memory management logic in our application.
Java memory management divides into two major parts:
    1). JVM Memory Structure and
    2). Working of the Garbage Collector.

What is the difference between String, StringBuffer and StringBuilder?
Answer:
A string is a sequence of characters.
In java, objects of String are immutable which means a constant and cannot be changed once created.
StringBuffer and StringBuilder are classes used for String manipulation. These are mutable objects,
which provide methods such as substring(), insert(), append(), delete() for String manipulation.
It is recommended to use StringBuilder whenever possible because it is faster than StringBuffer.
However, if the thread safety is necessary, the best option is StringBuffer objects.

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:
A singleton class is a class that can have only one object (an instance of the class) at a time.
After the first time, if we try to instantiate the Singleton class, the new variable also points
to the first instance created.

Explain the difference between While and Do..While loops?
Answer:
The while loop in java executes one or more statements after testing the loop continuation
condition at the start of each iteration. The do-while loop, however, tests the loop continuation
condition after the first iteration has completed. Therefore, the do-while loop guarantees
one execution of the loop logic whereas the while does not.

What is Enum?
Answer:
An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).

What is Iterator?
Answer:
An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet.
It is called an "iterator" because "iterating" is the technical term for looping.

Which one will take more memory: an int or Integer? Why?
Answer:
Integer will take more memory, because:
'int' is a primitive data type and takes 32 bits(4 bytes) to store.
On other hand 'Integer' is an object which takes 128 bits (16 bytes) to store its int value.

Why are Strings considered to be immutable in Java?
Answer:
The String is immutable in Java because of the security, synchronization and concurrency, caching,
and class loading. The reason of making string final is to destroy the immutability
and to not allow others to extend it. The String objects are cached in the String pool,
and it makes the String immutable.

What is constructor chaining in Java?
Answer:
Constructor chaining is the process of calling one constructor from another constructor with respect to
current object.
One of the main use of constructor chaining is to avoid duplicate codes while having multiple
constructor (by means of constructor overloading) and make code more readable.

The difference between Serial and Parallel Garbage Collector?
Answer:
The parallel collector is also known as throughput collector, it's a generational collector similar
to the serial collector. The primary difference between the serial and parallel collectors
is that the parallel collector has multiple threads that are used to speed up garbage collection.

What does JIT stands for?
Answer:
JIT in Java is an integral part of the JVM. It accelerates execution performance many times over
the previous level. In other words, it is a long-running, computer-intensive program that provides
the best performance environment. It optimizes the performance of the Java application at compile or
run time.

Explain the process of Java garbage collection?
Answer:
Garbage collection in Java is the process by which Java programs perform automatic memory management.
Java programs compile to bytecode that can be run on a Java Virtual Machine, or JVM for short.
When Java programs run on the JVM, objects are created on the heap, which is a portion of memory
dedicated to the program. Eventually, some objects will no longer be needed. The garbage collector
finds these unused objects and deletes them to free up memory.

Can you guarantee the garbage collection process?
Answer:
No, Garbage collection does not guarantee that a program will not run out of memory.

The purpose of garbage collection (GC) is to identify and discard objects that are no longer needed
by a Java program, so that their resources can be reclaimed and reused.

What is the difference between stack and heap in Java?
Answer:
Heap memory is used by all the parts of the application whereas stack memory is used only by
one thread of execution.

What is reflection in Java and why is it useful?
Answer:
The name reflection is used to describe code which is able to inspect other code in the same
system (or itself). t allows an executing Java program to examine or "introspect" upon itself,
and manipulate internal properties of the program. For example, it's possible for a Java class to
obtain the names of all its members and display them.

What is multithreading in Java?
Answer:
Multithreading is a Java feature that allows concurrent execution of two or more parts of a
program for maximum utilization of CPU. Each part of such program is called a thread.
So, threads are light-weight processes within a process.
Threads can be created by using two mechanisms :
1). Extending the Thread class
2). Implementing the Runnable Interface

What is synchronization in Java?
Answer:
Synchronization in java is the capability to control the access of multiple threads to any shared
resource. In the Multithreading concept, multiple threads try to access the shared resources at a
time to produce inconsistent results. The synchronization is necessary for reliable communication
between threads.

What is a Framework?
Answer:
Framework are the bodies that contains the pre-written codes (classes and functions) in which we
can add our code to overcome the problem. We can also say that frameworks use programmer's code
because the framework is in control of the programmer. We can use the framework by calling its methods,
inheritance, and supplying "callbacks", listeners, or other implementations of the Observer pattern.

What are the testing Frameworks available in Java?
Answer:
Top Java Testing Frameworks and Tools
1. Selenium
2. JUnit
3. TestNG
4. SerenityBDD
5. Mockito

What are jUnit and testNG?
Answer:
a). JUnit is an open-source foundation of testing frameworks on the Java Virtual Machine.
    The aim of the JUnit testing framework primarily focuses on efficiently creating and executing
    unit testing for an application. The JUnit testing framework establishes a Test Engine API that
    discovers and executes the unit tests on the testing framework platform.
b). TestNG testing framework is an easier version with a lot more functionalities that include annotations,
    arbitrary thread pools to run tests, etc. The TestNG testing framework is versatile and is designed
    to cover all the categories such as unit tests, functional tests, end-to-end tests, integration tests, etc.

What are the dependencies for this project?
Answer:
The dependencies are: gson, jackson, json, javax, mongo, mysql, protobuf and testng.

What is dependency injection in Java?
Answer:
Dependency injection (DI) is the concept in which objects get other required objects from outside.
DI can be implemented in any programming language. The general concept behind dependency injection is
called Inversion of Control.
A Java class has a dependency on another class, if it uses an instance of this class.

Explain what static binding and dynamic binding is?
Answer:
In Java static binding refers to the execution of a program where type of object is determined/known at
compile time i.e when compiler executes the code it know the type of object or class to which object
belongs.While in case of dynamic binding the type of object is determined at runtime.
Also static binding uses type of class to bind while dynamic binding uses type of object as the
resolution happens only at runtime because object only created during runtime due to which dynamic
binding becomes slower than in case of static binding.